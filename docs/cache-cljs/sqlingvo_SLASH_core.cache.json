["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$distinct","~$group-by","~$replace","~$update"]],"~:name","~$sqlingvo.core","~:imports",null,"~:requires",["^ ","~$db","~$sqlingvo.db","~$sqlingvo.expr","^?","^>","^>","~$util","~$sqlingvo.util","~$cljs.pprint","^B","^A","^A","~$str","~$clojure.string","~$expr","^?","^D","^D","~$compiler","~$sqlingvo.compiler","^G","^G"],"~:uses",["^ ","~$simple-dispatch","^B"],"~:defs",["^ ","~$restrict",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","^:","~:line",550,"~:column",7,"~:end-line",550,"~:end-column",15,"~:arglists",["~#list",["~$quote",["^T",[["~$condition"]]]]],"~:doc","Add a RESTRICT clause to an SQL statement."],"^9","~$sqlingvo.core/restrict","~:variadic",false,"^N","sqlingvo/core.cljc","^R",15,"~:method-params",["^T",[["^V"]]],"~:protocol-impl",null,"~:arglists-meta",["^T",[null,null]],"^P",1,"^O",550,"^Q",550,"~:max-fixed-arity",1,"~:fn-var",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a RESTRICT clause to an SQL statement."],"~$do-nothing",["^ ","^L",null,"^M",["^ ","^N","^:","^O",88,"^P",7,"^Q",88,"^R",17,"^S",["^T",["^U",["^T",[[]]]]],"^W","Add a DO NOTHING clause to a SQL statement."],"^9","~$sqlingvo.core/do-nothing","^Y",false,"^N","sqlingvo/core.cljc","^R",17,"^Z",["^T",[[]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",88,"^Q",88,"^11",0,"^12",true,"^S",["^T",["^U",["^T",[[]]]]],"^W","Add a DO NOTHING clause to a SQL statement."],"~$on-conflict",["^ ","^L",null,"^M",["^ ","^N","^:","^R",18,"~:top-fn",["^ ","^Y",true,"^11",1,"^Z",[["^T",["~$target","~$body"]]],"^S",["^T",[["^17","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",457,"~:style/indent",1,"^Q",457,"^S",["^T",["^U",["^T",[["^17","~$&","^18"]]]]],"^W","Add a ON CONFLICT clause to a SQL statement."],"^9","~$sqlingvo.core/on-conflict","^Y",true,"^N","sqlingvo/core.cljc","^R",18,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^17","^18"]]],"^S",["^T",[["^17","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^17","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",457,"^19",1,"^Q",457,"^11",1,"^12",true,"^S",["^T",[["^17","~$&","^18"]]],"^W","Add a ON CONFLICT clause to a SQL statement."],"~$chain-state",["^ ","^L",null,"^M",["^ ","^N","^:","^O",20,"^P",7,"^Q",20,"^R",18,"^S",["^T",["^U",["^T",[["^18"]]]]]],"^9","~$sqlingvo.core/chain-state","^Y",false,"^N","sqlingvo/core.cljc","^R",18,"^Z",["^T",[["^18"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",20,"^Q",20,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^18"]]]]]],"~$union",["^ ","^L",null,"^M",["^ ","^N","^:","^O",639,"^P",7,"^Q",639,"^R",12,"^S",["^T",["^U",["^T",[["~$&","~$args"]]]]],"^W","Build a UNION statement.\n\n   Examples:\n\n     (union\n      (select db [1])\n      (select db [2]))\n\nAnother example:\n\n     (union\n      {:all true}\n      (select db [1])\n      (select db [2]))","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1>"]]],"^S",["^T",[["~$&","^1>"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/union","^Y",true,"^N","sqlingvo/core.cljc","^R",12,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1>"]]],"^S",["^T",[["~$&","^1>"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1>"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",639,"^Q",639,"^11",0,"^12",true,"^S",["^T",[["~$&","^1>"]]],"^W","Build a UNION statement.\n\n   Examples:\n\n     (union\n      (select db [1])\n      (select db [2]))\n\nAnother example:\n\n     (union\n      {:all true}\n      (select db [1])\n      (select db [2]))"],"~$temporary",["^ ","^L",null,"^M",["^ ","^N","^:","^O",611,"^P",7,"^Q",611,"^R",16,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a TEMPORARY clause to an SQL statement."],"^9","~$sqlingvo.core/temporary","^Y",false,"^N","sqlingvo/core.cljc","^R",16,"^Z",["^T",[["^V"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",611,"^Q",611,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a TEMPORARY clause to an SQL statement."],"~$primary-key",["^ ","^L",null,"^M",["^ ","^N","^:","^O",501,"^P",7,"^Q",501,"^R",18,"^S",["^T",["^U",["^T",[["~$&","~$keys"]]]]],"^W","Add a PRIMARY KEY clause to a table.","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1C"]]],"^S",["^T",[["~$&","^1C"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/primary-key","^Y",true,"^N","sqlingvo/core.cljc","^R",18,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1C"]]],"^S",["^T",[["~$&","^1C"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1C"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",501,"^Q",501,"^11",0,"^12",true,"^S",["^T",[["~$&","^1C"]]],"^W","Add a PRIMARY KEY clause to a table."],"~$join",["^ ","^L",null,"^M",["^ ","^N","^:","^O",393,"^P",7,"^Q",393,"^R",11,"^S",["^T",["^U",["^T",[["~$from","^V","~$&",["^ ","~:keys",["~$type","~$outer","~$pk"]]]]]]],"^W","Add a JOIN clause to a statement.\n\n  Examples:\n\nFirst:\n\n    (select db [:*]\n      (from :countries)\n      (join :continents '(using :id)))\n\nSecond:\n\n    (select db [:*]\n      (from :continents)\n      (join :countries.continent-id :continents.id))\n\nThird:\n\n    (select db [:*]\n      (from :countries)\n      (join :continents '(on (= :continents.id :countries.continent-id))))","^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^1F","^V",["^ ","^1G",["^1H","^1I","^1J"]]]]],"^S",["^T",[["^1F","^V","~$&",["^ ","^1G",["^1H","^1I","^1J"]]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/join","^Y",true,"^N","sqlingvo/core.cljc","^R",11,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^1F","^V",["^ ","^1G",["^1H","^1I","^1J"]]]]],"^S",["^T",[["^1F","^V","~$&",["^ ","^1G",["^1H","^1I","^1J"]]]]],"^10",["^T",[null]]],"^Z",[["^T",["^1F","^V",["^ ","^1G",["^1H","^1I","^1J"]]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",393,"^Q",393,"^11",2,"^12",true,"^S",["^T",[["^1F","^V","~$&",["^ ","^1G",["^1H","^1I","^1J"]]]]],"^W","Add a JOIN clause to a statement.\n\n  Examples:\n\nFirst:\n\n    (select db [:*]\n      (from :countries)\n      (join :continents '(using :id)))\n\nSecond:\n\n    (select db [:*]\n      (from :continents)\n      (join :countries.continent-id :continents.id))\n\nThird:\n\n    (select db [:*]\n      (from :countries)\n      (join :continents '(on (= :continents.id :countries.continent-id))))"],"~$select",["^ ","^L",null,"^M",["^ ","^N","^:","^R",13,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","~$exprs","^18"]]],"^S",["^T",[["^=","^1M","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",573,"^19",2,"^Q",573,"^S",["^T",["^U",["^T",[["^=","^1M","~$&","^18"]]]]],"^W","Build a SELECT statement.\n\n  Examples:\n\n    (select db [1])\n\nAll the columns:\n\n    (select db [:*]\n      (from :continents))\n\n\nOnly `id` and `name`:\n\n    (select db [:id :name]\n      (from :continents))"],"^9","~$sqlingvo.core/select","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^1M","^18"]]],"^S",["^T",[["^=","^1M","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^1M","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",573,"^19",2,"^Q",573,"^11",2,"^12",true,"^S",["^T",[["^=","^1M","~$&","^18"]]],"^W","Build a SELECT statement.\n\n  Examples:\n\n    (select db [1])\n\nAll the columns:\n\n    (select db [:*]\n      (from :continents))\n\n\nOnly `id` and `name`:\n\n    (select db [:id :name]\n      (from :continents))"],"~$compose",["^ ","^L",null,"^M",["^ ","^N","^:","^O",23,"^P",7,"^Q",23,"^R",14,"^S",["^T",["^U",["^T",[["~$stmt","~$&","^18"]]]]],"^W","Compose multiple SQL statements.","^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^1P","^18"]]],"^S",["^T",[["^1P","~$&","^18"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/compose","^Y",true,"^N","sqlingvo/core.cljc","^R",14,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^1P","^18"]]],"^S",["^T",[["^1P","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1P","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",23,"^Q",23,"^11",1,"^12",true,"^S",["^T",[["^1P","~$&","^18"]]],"^W","Compose multiple SQL statements."],"~$encoding",["^ ","^L",null,"^M",["^ ","^N","^:","^O",122,"^P",7,"^Q",122,"^R",15,"^S",["^T",["^U",["^T",[["^1R"]]]]],"^W","Add a ENCODING clause to an SQL statement."],"^9","~$sqlingvo.core/encoding","^Y",false,"^N","sqlingvo/core.cljc","^R",15,"^Z",["^T",[["^1R"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",122,"^Q",122,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^1R"]]]]],"^W","Add a ENCODING clause to an SQL statement."],"~$continue-identity",["^ ","^L",null,"^M",["^ ","^N","^:","^O",73,"^P",7,"^Q",73,"^R",24,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a CONTINUE IDENTITY clause to an SQL statement."],"^9","~$sqlingvo.core/continue-identity","^Y",false,"^N","sqlingvo/core.cljc","^R",24,"^Z",["^T",[["^V"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",73,"^Q",73,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a CONTINUE IDENTITY clause to an SQL statement."],"~$explain",["^ ","^L",null,"^M",["^ ","^N","^:","^R",14,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^1P",["~$opts"]]]],"^S",["^T",[["^=","^1P","~$&",["^1W"]]]],"^10",["^T",[null]]],"^P",7,"^O",127,"^19",1,"^Q",127,"^S",["^T",["^U",["^T",[["^=","^1P","~$&",["^1W"]]]]]],"^W","Return an EXPLAIN statement for `stmt`. `opts` can be a map with\n  the following key/value pairs:\n\n   - :analyze boolean\n   - :buffers boolean\n   - :costs   boolean\n   - :format  :json, :text, :yaml, :xml\n   - :timing  boolean\n   - :verbose boolean\n\n  Examples:\n\n    (explain db\n      (select db [:*]\n        (from :foo)))\n\nWith `analyze`:\n\n    (explain db\n      (select db [:*]\n        (from :foo))\n      {:analyze true})"],"^9","~$sqlingvo.core/explain","^Y",true,"^N","sqlingvo/core.cljc","^R",14,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^1P",["^1W"]]]],"^S",["^T",[["^=","^1P","~$&",["^1W"]]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^1P",["^1W"]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",127,"^19",1,"^Q",127,"^11",2,"^12",true,"^S",["^T",[["^=","^1P","~$&",["^1W"]]]],"^W","Return an EXPLAIN statement for `stmt`. `opts` can be a map with\n  the following key/value pairs:\n\n   - :analyze boolean\n   - :buffers boolean\n   - :costs   boolean\n   - :format  :json, :text, :yaml, :xml\n   - :timing  boolean\n   - :verbose boolean\n\n  Examples:\n\n    (explain db\n      (select db [:*]\n        (from :foo)))\n\nWith `analyze`:\n\n    (explain db\n      (select db [:*]\n        (from :foo))\n      {:analyze true})"],"~$having",["^ ","^L",null,"^M",["^ ","^N","^:","^O",327,"^P",7,"^Q",327,"^R",13,"^S",["^T",["^U",["^T",[["^V","~$&",["~$combine"]]]]]],"^W","Add a HAVING clause to an SQL statement.\n\n  Examples:\n\n    (select db [:city '(max :temp-lo)]\n      (from :weather)\n      (group-by :city)\n      (having '(< (max :temp-lo) 40)))","^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^V",["^1Z"]]]],"^S",["^T",[["^V","~$&",["^1Z"]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/having","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^V",["^1Z"]]]],"^S",["^T",[["^V","~$&",["^1Z"]]]],"^10",["^T",[null]]],"^Z",[["^T",["^V",["^1Z"]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",327,"^Q",327,"^11",1,"^12",true,"^S",["^T",[["^V","~$&",["^1Z"]]]],"^W","Add a HAVING clause to an SQL statement.\n\n  Examples:\n\n    (select db [:city '(max :temp-lo)]\n      (from :weather)\n      (group-by :city)\n      (having '(< (max :temp-lo) 40)))"],"~$create-table",["^ ","^L",null,"^M",["^ ","^N","^:","^R",19,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","~$table","^18"]]],"^S",["^T",[["^=","^21","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",189,"^19",2,"^Q",189,"^S",["^T",["^U",["^T",[["^=","^21","~$&","^18"]]]]],"^W","Build a CREATE TABLE statement."],"^9","~$sqlingvo.core/create-table","^Y",true,"^N","sqlingvo/core.cljc","^R",19,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^21","^18"]]],"^S",["^T",[["^=","^21","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^21","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",189,"^19",2,"^Q",189,"^11",2,"^12",true,"^S",["^T",[["^=","^21","~$&","^18"]]],"^W","Build a CREATE TABLE statement."],"~$insert",["^ ","^L",null,"^M",["^ ","^N","^:","^R",13,"^16",["^ ","^Y",true,"^11",3,"^Z",[["^T",["^=","^21","~$columns","^18"]]],"^S",["^T",[["^=","^21","^24","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",356,"^19",3,"^Q",356,"^S",["^T",["^U",["^T",[["^=","^21","^24","~$&","^18"]]]]],"^W","Build a INSERT statement."],"^9","~$sqlingvo.core/insert","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",3,"^Z",[["^T",["^=","^21","^24","^18"]]],"^S",["^T",[["^=","^21","^24","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^21","^24","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",356,"^19",3,"^Q",356,"^11",3,"^12",true,"^S",["^T",[["^=","^21","^24","~$&","^18"]]],"^W","Build a INSERT statement."],"~$where",["^ ","^L",null,"^M",["^ ","^N","^:","^O",724,"^P",7,"^Q",724,"^R",12,"^S",["^T",["^U",["^T",[["^V","~$&",["^1Z"]]]]]],"^W","Add a WHERE clause to an SQL statement.\n\n  Examples:\n\n    (select db [1]\n      (where '(in 1 (1 2 3))))\n\nAnother example:\n\n    (select db [*]\n      (from :continents)\n      (where '(= :name \"Europe\")))\n\nAnother example:\n\n    (delete db :continents\n      (where '(= :id 1)))","^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^V",["^1Z"]]]],"^S",["^T",[["^V","~$&",["^1Z"]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/where","^Y",true,"^N","sqlingvo/core.cljc","^R",12,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^V",["^1Z"]]]],"^S",["^T",[["^V","~$&",["^1Z"]]]],"^10",["^T",[null]]],"^Z",[["^T",["^V",["^1Z"]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",724,"^Q",724,"^11",1,"^12",true,"^S",["^T",[["^V","~$&",["^1Z"]]]],"^W","Add a WHERE clause to an SQL statement.\n\n  Examples:\n\n    (select db [1]\n      (where '(in 1 (1 2 3))))\n\nAnother example:\n\n    (select db [*]\n      (from :continents)\n      (where '(= :name \"Europe\")))\n\nAnother example:\n\n    (delete db :continents\n      (where '(= :id 1)))"],"~$except",["^ ","^L",null,"^M",["^ ","^N","^:","^O",264,"^P",7,"^Q",264,"^R",13,"^S",["^T",["^U",["^T",[["~$&","^1>"]]]]],"^W","Build an EXCEPT statement.\n\nExamples:\n\n    (except\n     (select db [1])\n     (select db [2]))\n\nAnother example:\n\n    (except\n     {:all true}\n     (select db [1])\n     (select db [2]))","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1>"]]],"^S",["^T",[["~$&","^1>"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/except","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1>"]]],"^S",["^T",[["~$&","^1>"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1>"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",264,"^Q",264,"^11",0,"^12",true,"^S",["^T",[["~$&","^1>"]]],"^W","Build an EXCEPT statement.\n\nExamples:\n\n    (except\n     (select db [1])\n     (select db [2]))\n\nAnother example:\n\n    (except\n     {:all true}\n     (select db [1])\n     (select db [2]))"],"~$copy",["^ ","^L",null,"^M",["^ ","^N","^:","^R",11,"^16",["^ ","^Y",true,"^11",3,"^Z",[["^T",["^=","^21","^24","^18"]]],"^S",["^T",[["^=","^21","^24","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",162,"^19",3,"^Q",162,"^S",["^T",["^U",["^T",[["^=","^21","^24","~$&","^18"]]]]],"^W","Build a COPY statement.\n\n  Examples:\n\n    (copy db :country []\n      (from :stdin))\n\nAnother example:\n\n    (copy db :country []\n      (from \"/usr1/proj/bray/sql/country_data\"))"],"^9","~$sqlingvo.core/copy","^Y",true,"^N","sqlingvo/core.cljc","^R",11,"^16",["^ ","^Y",true,"^11",3,"^Z",[["^T",["^=","^21","^24","^18"]]],"^S",["^T",[["^=","^21","^24","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^21","^24","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",162,"^19",3,"^Q",162,"^11",3,"^12",true,"^S",["^T",[["^=","^21","^24","~$&","^18"]]],"^W","Build a COPY statement.\n\n  Examples:\n\n    (copy db :country []\n      (from :stdin))\n\nAnother example:\n\n    (copy db :country []\n      (from \"/usr1/proj/bray/sql/country_data\"))"],"~$desc",["^ ","^L",null,"^M",["^ ","^N","^:","^O",103,"^P",7,"^Q",103,"^R",11,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Parse `expr` and return an ORDER BY expr using descending order."],"^9","~$sqlingvo.core/desc","^Y",false,"^N","sqlingvo/core.cljc","^R",11,"^Z",["^T",[["^E"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",103,"^Q",103,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Parse `expr` and return an ORDER BY expr using descending order."],"~$like",["^ ","^L",null,"^M",["^ ","^N","^:","^O",440,"^P",7,"^Q",440,"^R",11,"^S",["^T",["^U",["^T",[["^21","~$&",["^ ","~:as","^1W"]]]]]],"^W","Add a LIKE clause to an SQL statement.","^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^21",["^ ","^2?","^1W"]]]],"^S",["^T",[["^21","~$&",["^ ","^2?","^1W"]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/like","^Y",true,"^N","sqlingvo/core.cljc","^R",11,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^21",["^ ","^2?","^1W"]]]],"^S",["^T",[["^21","~$&",["^ ","^2?","^1W"]]]],"^10",["^T",[null]]],"^Z",[["^T",["^21",["^ ","^2?","^1W"]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",440,"^Q",440,"^11",1,"^12",true,"^S",["^T",[["^21","~$&",["^ ","^2?","^1W"]]]],"^W","Add a LIKE clause to an SQL statement."],"~$db?",["^ ","^L",null,"^M",["^ ","^N","^:","^O",15,"^P",7,"^Q",15,"^R",10,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Return true if `x` is a database, otherwise false."],"^9","~$sqlingvo.core/db?","^Y",false,"^N","sqlingvo/core.cljc","^R",10,"^Z",["^T",[["~$x"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",15,"^Q",15,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["~$x"]]]]],"^W","Return true if `x` is a database, otherwise false."],"~$limit",["^ ","^L",null,"^M",["^ ","^N","^:","^O",447,"^P",7,"^Q",447,"^R",12,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a LIMIT clause to an SQL statement."],"^9","~$sqlingvo.core/limit","^Y",false,"^N","sqlingvo/core.cljc","^R",12,"^Z",["^T",[["^E"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",447,"^Q",447,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a LIMIT clause to an SQL statement."],"~$do-constraint",["^ ","^L",null,"^M",["^ ","^N","^:","^O",83,"^P",7,"^Q",83,"^R",20,"^S",["^T",["^U",["^T",[["~$constraint"]]]]],"^W","Add a DO CONSTRAINT clause to a SQL statement."],"^9","~$sqlingvo.core/do-constraint","^Y",false,"^N","sqlingvo/core.cljc","^R",20,"^Z",["^T",[["^2F"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",83,"^Q",83,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^2F"]]]]],"^W","Add a DO CONSTRAINT clause to a SQL statement."],"~$truncate",["^ ","^L",null,"^M",["^ ","^N","^:","^R",15,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","~$tables","^18"]]],"^S",["^T",[["^=","^2I","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",616,"^19",2,"^Q",616,"^S",["^T",["^U",["^T",[["^=","^2I","~$&","^18"]]]]],"^W","Build a TRUNCATE statement.\n\n  Examples:\n\n    (truncate db [:continents])\n\nAnother example:\n\n    (truncate db [:continents :countries])"],"^9","~$sqlingvo.core/truncate","^Y",true,"^N","sqlingvo/core.cljc","^R",15,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^2I","^18"]]],"^S",["^T",[["^=","^2I","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^2I","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",616,"^19",2,"^Q",616,"^11",2,"^12",true,"^S",["^T",[["^=","^2I","~$&","^18"]]],"^W","Build a TRUNCATE statement.\n\n  Examples:\n\n    (truncate db [:continents])\n\nAnother example:\n\n    (truncate db [:continents :countries])"],"~$cascade",["^ ","^L",null,"^M",["^ ","^N","^:","^O",46,"^P",7,"^Q",46,"^R",14,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a CASCADE clause to an SQL statement."],"^9","~$sqlingvo.core/cascade","^Y",false,"^N","sqlingvo/core.cljc","^R",14,"^Z",["^T",[["^V"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",46,"^Q",46,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a CASCADE clause to an SQL statement."],"^6",["^ ","^L",null,"^M",["^ ","^N","^:","^O",322,"^P",7,"^Q",322,"^R",15,"^S",["^T",["^U",["^T",[["~$&","^1M"]]]]],"^W","Add a GROUP BY clause to an SQL statement.","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/group-by","^Y",true,"^N","sqlingvo/core.cljc","^R",15,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1M"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",322,"^Q",322,"^11",0,"^12",true,"^S",["^T",[["~$&","^1M"]]],"^W","Add a GROUP BY clause to an SQL statement."],"~$concurrently",["^ ","^L",null,"^M",["^ ","^N","^:","^O",78,"^P",7,"^Q",78,"^R",19,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a CONCURRENTLY clause to a SQL statement."],"^9","~$sqlingvo.core/concurrently","^Y",false,"^N","sqlingvo/core.cljc","^R",19,"^Z",["^T",[["^V"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",78,"^Q",78,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a CONCURRENTLY clause to a SQL statement."],"^=",["^ ","^L",null,"^M",["^ ","^N","^:","^O",10,"^P",7,"^Q",10,"^R",9,"^S",["^T",["^U",["^T",[["~$spec","~$&",["^1W"]]]]]],"^W","Return a new database for `spec`.","^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^2P",["^1W"]]]],"^S",["^T",[["^2P","~$&",["^1W"]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/db","^Y",true,"^N","sqlingvo/core.cljc","^R",9,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^2P",["^1W"]]]],"^S",["^T",[["^2P","~$&",["^1W"]]]],"^10",["^T",[null]]],"^Z",[["^T",["^2P",["^1W"]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",10,"^Q",10,"^11",1,"^12",true,"^S",["^T",[["^2P","~$&",["^1W"]]]],"^W","Return a new database for `spec`."],"~$inherits",["^ ","^L",null,"^M",["^ ","^N","^:","^O",349,"^P",7,"^Q",349,"^R",15,"^S",["^T",["^U",["^T",[["~$&","^2I"]]]]],"^W","Add an INHERITS clause to an SQL statement.","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^2I"]]],"^S",["^T",[["~$&","^2I"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/inherits","^Y",true,"^N","sqlingvo/core.cljc","^R",15,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^2I"]]],"^S",["^T",[["~$&","^2I"]]],"^10",["^T",[null]]],"^Z",[["^T",["^2I"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",349,"^Q",349,"^11",0,"^12",true,"^S",["^T",[["~$&","^2I"]]],"^W","Add an INHERITS clause to an SQL statement."],"~$if-exists",["^ ","^L",null,"^M",["^ ","^N","^:","^O",339,"^P",7,"^Q",339,"^R",16,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a IF EXISTS clause to an SQL statement."],"^9","~$sqlingvo.core/if-exists","^Y",false,"^N","sqlingvo/core.cljc","^R",16,"^Z",["^T",[["^V"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",339,"^Q",339,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a IF EXISTS clause to an SQL statement."],"~$offset",["^ ","^L",null,"^M",["^ ","^N","^:","^O",486,"^P",7,"^Q",486,"^R",13,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a OFFSET clause to an SQL statement."],"^9","~$sqlingvo.core/offset","^Y",false,"^N","sqlingvo/core.cljc","^R",13,"^Z",["^T",[["^E"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",486,"^Q",486,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a OFFSET clause to an SQL statement."],"~$on-conflict-on-constraint",["^ ","^L",null,"^M",["^ ","^N","^:","^R",32,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^17","^18"]]],"^S",["^T",[["^17","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",472,"^19",1,"^Q",472,"^S",["^T",["^U",["^T",[["^17","~$&","^18"]]]]],"^W","Add a ON CONFLICT ON CONSTRAINT clause to a SQL statement."],"^9","~$sqlingvo.core/on-conflict-on-constraint","^Y",true,"^N","sqlingvo/core.cljc","^R",32,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^17","^18"]]],"^S",["^T",[["^17","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^17","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",472,"^19",1,"^Q",472,"^11",1,"^12",true,"^S",["^T",[["^17","~$&","^18"]]],"^W","Add a ON CONFLICT ON CONSTRAINT clause to a SQL statement."],"~$check",["^ ","^L",null,"^M",["^ ","^N","^:","^O",51,"^P",7,"^Q",51,"^R",12,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a CHECK clause to an SQL statement."],"^9","~$sqlingvo.core/check","^Y",false,"^N","sqlingvo/core.cljc","^R",12,"^Z",["^T",[["^E"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",51,"^Q",51,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a CHECK clause to an SQL statement."],"~$drop-materialized-view",["^ ","^L",null,"^M",["^ ","^N","^:","^R",29,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","~$view","^18"]]],"^S",["^T",[["^=","^31","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",507,"^19",2,"^Q",507,"^S",["^T",["^U",["^T",[["^=","^31","~$&","^18"]]]]],"^W","Build a DROP MATERIALIZED VIEW statement.\n\n  Examples:\n\n    (drop-materialized-view db :order-summary)"],"^9","~$sqlingvo.core/drop-materialized-view","^Y",true,"^N","sqlingvo/core.cljc","^R",29,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^31","^18"]]],"^S",["^T",[["^=","^31","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^31","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",507,"^19",2,"^Q",507,"^11",2,"^12",true,"^S",["^T",[["^=","^31","~$&","^18"]]],"^W","Build a DROP MATERIALIZED VIEW statement.\n\n  Examples:\n\n    (drop-materialized-view db :order-summary)"],"~$asc",["^ ","^L",null,"^M",["^ ","^N","^:","^O",42,"^P",7,"^Q",42,"^R",10,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Parse `expr` and return an ORDER BY expr using ascending order."],"^9","~$sqlingvo.core/asc","^Y",false,"^N","sqlingvo/core.cljc","^R",10,"^Z",["^T",[["^E"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",42,"^Q",42,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Parse `expr` and return an ORDER BY expr using ascending order."],"~$as",["^ ","^L",null,"^M",["^ ","^N","^:","^O",33,"^P",7,"^Q",33,"^R",9,"^S",["^T",["^U",["^T",[["^E","~$alias","~$&",["^24"]]]]]],"^W","Parse `expr` and return an expr with and AS clause using `alias`.","^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^E","^36",["^24"]]]],"^S",["^T",[["^E","^36","~$&",["^24"]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/as","^Y",true,"^N","sqlingvo/core.cljc","^R",9,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^E","^36",["^24"]]]],"^S",["^T",[["^E","^36","~$&",["^24"]]]],"^10",["^T",[null]]],"^Z",[["^T",["^E","^36",["^24"]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",33,"^Q",33,"^11",2,"^12",true,"^S",["^T",[["^E","^36","~$&",["^24"]]]],"^W","Parse `expr` and return an expr with and AS clause using `alias`."],"~$make-set-op",["^ ","^L",null,"^M",["^ ","^N","^:","^O",251,"^P",8,"^Q",251,"^R",19,"~:private",true,"^S",["^T",["^U",["^T",[["~$op","^1>"]]]]]],"^39",true,"^9","~$sqlingvo.core/make-set-op","^Y",false,"^N","sqlingvo/core.cljc","^R",19,"^Z",["^T",[["^3:","^1>"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",251,"^Q",251,"^11",2,"^12",true,"^S",["^T",["^U",["^T",[["^3:","^1>"]]]]]],"~$refresh-materialized-view",["^ ","^L",null,"^M",["^ ","^N","^:","^R",32,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^31","^18"]]],"^S",["^T",[["^=","^31","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",526,"^19",2,"^Q",526,"^S",["^T",["^U",["^T",[["^=","^31","~$&","^18"]]]]],"^W","Build a REFRESH MATERIALIZED VIEW statement.\n\n  Examples:\n\n    (refresh-materialized-view db :order-summary)"],"^9","~$sqlingvo.core/refresh-materialized-view","^Y",true,"^N","sqlingvo/core.cljc","^R",32,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^31","^18"]]],"^S",["^T",[["^=","^31","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^31","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",526,"^19",2,"^Q",526,"^11",2,"^12",true,"^S",["^T",[["^=","^31","~$&","^18"]]],"^W","Build a REFRESH MATERIALIZED VIEW statement.\n\n  Examples:\n\n    (refresh-materialized-view db :order-summary)"],"^8",["^ ","^L",null,"^M",["^ ","^N","^:","^R",13,"^16",["^ ","^Y",true,"^11",3,"^Z",[["^T",["^=","^21","~$row","^18"]]],"^S",["^T",[["^=","^21","^3>","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",657,"^19",2,"^Q",657,"^S",["^T",["^U",["^T",[["^=","^21","^3>","~$&","^18"]]]]],"^W","Build a UPDATE statement.\n\n  Examples:\n\n    (update db :films {:kind \"Dramatic\"}\n      (where '(= :kind \"Drama\")))"],"^9","~$sqlingvo.core/update","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",3,"^Z",[["^T",["^=","^21","^3>","^18"]]],"^S",["^T",[["^=","^21","^3>","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^21","^3>","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",657,"^19",2,"^Q",657,"^11",3,"^12",true,"^S",["^T",[["^=","^21","^3>","~$&","^18"]]],"^W","Build a UPDATE statement.\n\n  Examples:\n\n    (update db :films {:kind \"Dramatic\"}\n      (where '(= :kind \"Drama\")))"],"~$delete",["^ ","^L",null,"^M",["^ ","^N","^:","^R",13,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^21","^18"]]],"^S",["^T",[["^=","^21","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",204,"^19",2,"^Q",204,"^S",["^T",["^U",["^T",[["^=","^21","~$&","^18"]]]]],"^W","Build a DELETE statement.\n\n  Examples:\n\n    (delete db :continents)\n\nAnother example:\n\n    (delete db :continents\n      (where '(= :id 1)))"],"^9","~$sqlingvo.core/delete","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^21","^18"]]],"^S",["^T",[["^=","^21","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^21","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",204,"^19",2,"^Q",204,"^11",2,"^12",true,"^S",["^T",[["^=","^21","~$&","^18"]]],"^W","Build a DELETE statement.\n\n  Examples:\n\n    (delete db :continents)\n\nAnother example:\n\n    (delete db :continents\n      (where '(= :id 1)))"],"~$ast",["^ ","^L",null,"^M",["^ ","^N","^:","^O",28,"^P",7,"^Q",28,"^R",10,"^S",["^T",["^U",["^T",[["^1P"]]]]],"^W","Returns the abstract syntax tree of `stmt`."],"^9","~$sqlingvo.core/ast","^Y",false,"^N","sqlingvo/core.cljc","^R",10,"^Z",["^T",[["^1P"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",28,"^Q",28,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^1P"]]]]],"^W","Returns the abstract syntax tree of `stmt`."],"~$if-not-exists",["^ ","^L",null,"^M",["^ ","^N","^:","^O",344,"^P",7,"^Q",344,"^R",20,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a IF EXISTS clause to an SQL statement."],"^9","~$sqlingvo.core/if-not-exists","^Y",false,"^N","sqlingvo/core.cljc","^R",20,"^Z",["^T",[["^V"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",344,"^Q",344,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a IF EXISTS clause to an SQL statement."],"~$do-update",["^ ","^L",null,"^M",["^ ","^N","^:","^O",93,"^P",7,"^Q",93,"^R",16,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a DO UPDATE clause to a SQL statement."],"^9","~$sqlingvo.core/do-update","^Y",false,"^N","sqlingvo/core.cljc","^R",16,"^Z",["^T",[["^E"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",93,"^Q",93,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^E"]]]]],"^W","Add a DO UPDATE clause to a SQL statement."],"~$window",["^ ","^L",null,"^M",["^ ","^N","^:","^O",496,"^P",7,"^Q",496,"^R",13,"^S",["^T",["^U",["^T",[["~$&","^1M"]]]]],"^W","Add a WINDOW clause to an SQL statement.","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/window","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1M"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",496,"^Q",496,"^11",0,"^12",true,"^S",["^T",[["~$&","^1M"]]],"^W","Add a WINDOW clause to an SQL statement."],"^5",["^ ","^L",null,"^M",["^ ","^N","^:","^O",108,"^P",7,"^Q",108,"^R",15,"^S",["^T",["^U",["^T",[["^1M","~$&",["^ ","^1G",["~$on"]]]]]]],"^W","Parse `exprs` and return a DISTINCT clause.","^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^1M",["^ ","^1G",["^3J"]]]]],"^S",["^T",[["^1M","~$&",["^ ","^1G",["^3J"]]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/distinct","^Y",true,"^N","sqlingvo/core.cljc","^R",15,"^16",["^ ","^Y",true,"^11",1,"^Z",[["^T",["^1M",["^ ","^1G",["^3J"]]]]],"^S",["^T",[["^1M","~$&",["^ ","^1G",["^3J"]]]]],"^10",["^T",[null]]],"^Z",[["^T",["^1M",["^ ","^1G",["^3J"]]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",108,"^Q",108,"^11",1,"^12",true,"^S",["^T",[["^1M","~$&",["^ ","^1G",["^3J"]]]]],"^W","Parse `exprs` and return a DISTINCT clause."],"~$column",["^ ","^L",null,"^M",["^ ","^N","^:","^O",60,"^P",7,"^Q",60,"^R",13,"^S",["^T",["^U",["^T",[["~$name","^1H","~$&",["^ ","^2?","~$options"]]]]]],"^W","Add a column to `stmt`.","^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^3M","^1H",["^ ","^2?","^3N"]]]],"^S",["^T",[["^3M","^1H","~$&",["^ ","^2?","^3N"]]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/column","^Y",true,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^3M","^1H",["^ ","^2?","^3N"]]]],"^S",["^T",[["^3M","^1H","~$&",["^ ","^2?","^3N"]]]],"^10",["^T",[null]]],"^Z",[["^T",["^3M","^1H",["^ ","^2?","^3N"]]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",60,"^Q",60,"^11",2,"^12",true,"^S",["^T",[["^3M","^1H","~$&",["^ ","^2?","^3N"]]]],"^W","Add a column to `stmt`."],"~$drop-table",["^ ","^L",null,"^M",["^ ","^N","^:","^R",17,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^2I","^18"]]],"^S",["^T",[["^=","^2I","~$&","^18"]]],"^10",["^T",[null]]],"^P",7,"^O",228,"^19",2,"^Q",228,"^S",["^T",["^U",["^T",[["^=","^2I","~$&","^18"]]]]],"^W","Build a DROP TABLE statement.\n\n  Examples:\n\n    (drop-table db [:continents])\n\nAnother example:\n\n    (drop-table db [:continents :countries])"],"^9","~$sqlingvo.core/drop-table","^Y",true,"^N","sqlingvo/core.cljc","^R",17,"^16",["^ ","^Y",true,"^11",2,"^Z",[["^T",["^=","^2I","^18"]]],"^S",["^T",[["^=","^2I","~$&","^18"]]],"^10",["^T",[null]]],"^Z",[["^T",["^=","^2I","^18"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",228,"^19",2,"^Q",228,"^11",2,"^12",true,"^S",["^T",[["^=","^2I","~$&","^18"]]],"^W","Build a DROP TABLE statement.\n\n  Examples:\n\n    (drop-table db [:continents])\n\nAnother example:\n\n    (drop-table db [:continents :countries])"],"~$restart-identity",["^ ","^L",null,"^M",["^ ","^N","^:","^O",545,"^P",7,"^Q",545,"^R",23,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a RESTART IDENTITY clause to an SQL statement."],"^9","~$sqlingvo.core/restart-identity","^Y",false,"^N","sqlingvo/core.cljc","^R",23,"^Z",["^T",[["^V"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",545,"^Q",545,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^V"]]]]],"^W","Add a RESTART IDENTITY clause to an SQL statement."],"~$delimiter",["^ ","^L",null,"^M",["^ ","^N","^:","^O",117,"^P",7,"^Q",117,"^R",16,"^S",["^T",["^U",["^T",[["^3T"]]]]],"^W","Add a DELIMITER clause to an SQL statement."],"^9","~$sqlingvo.core/delimiter","^Y",false,"^N","sqlingvo/core.cljc","^R",16,"^Z",["^T",[["^3T"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",117,"^Q",117,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^3T"]]]]],"^W","Add a DELIMITER clause to an SQL statement."],"~$sql",["^ ","^L",null,"^M",["^ ","^N","^:","^O",768,"^P",7,"^Q",768,"^R",10,"^S",["^T",["^U",["^T",[["^1P"]]]]],"^W","Compile `stmt` into a clojure.java.jdbc compatible vector."],"^9","~$sqlingvo.core/sql","^Y",false,"^N","sqlingvo/core.cljc","^R",10,"^Z",["^T",[["^1P"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",768,"^Q",768,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^1P"]]]]],"^W","Compile `stmt` into a clojure.java.jdbc compatible vector."],"~$nulls",["^ ","^L",null,"^M",["^ ","^N","^:","^O",452,"^P",7,"^Q",452,"^R",12,"^S",["^T",["^U",["^T",[["^E","^26"]]]]],"^W","Parse `expr` and return an NULLS FIRST/LAST expr."],"^9","~$sqlingvo.core/nulls","^Y",false,"^N","sqlingvo/core.cljc","^R",12,"^Z",["^T",[["^E","^26"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",452,"^Q",452,"^11",2,"^12",true,"^S",["^T",["^U",["^T",[["^E","^26"]]]]],"^W","Parse `expr` and return an NULLS FIRST/LAST expr."],"~$returning",["^ ","^L",null,"^M",["^ ","^N","^:","^O",555,"^P",7,"^Q",555,"^R",16,"^S",["^T",["^U",["^T",[["~$&","^1M"]]]]],"^W","Add a RETURNING clause to an SQL statement.\n\nExamples:\n\n    (insert db :distributors []\n      (values [{:did 106 :dname \"XYZ Widgets\"}])\n      (returning :*))\n\nAnother example:\n\n    (update db :films\n      {:kind \"Dramatic\"}\n      (where '(= :kind \"Drama\"))\n      (returning :*))","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/returning","^Y",true,"^N","sqlingvo/core.cljc","^R",16,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1M"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",555,"^Q",555,"^11",0,"^12",true,"^S",["^T",[["~$&","^1M"]]],"^W","Add a RETURNING clause to an SQL statement.\n\nExamples:\n\n    (insert db :distributors []\n      (values [{:did 106 :dname \"XYZ Widgets\"}])\n      (returning :*))\n\nAnother example:\n\n    (update db :films\n      {:kind \"Dramatic\"}\n      (where '(= :kind \"Drama\"))\n      (returning :*))"],"~$with-data",["^ ","^L",null,"^M",["^ ","^N","^:","^O",98,"^P",7,"^Q",98,"^R",16,"^S",["^T",["^U",["^T",[["~$data?"]]]]],"^W","Add a WITH [NO] DATA clause to a SQL statement."],"^9","~$sqlingvo.core/with-data","^Y",false,"^N","sqlingvo/core.cljc","^R",16,"^Z",["^T",[["^41"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",98,"^Q",98,"^11",1,"^12",true,"^S",["^T",["^U",["^T",[["^41"]]]]],"^W","Add a WITH [NO] DATA clause to a SQL statement."],"~$values",["^ ","^L",null,"^M",["^ ","^N","^:","^O",681,"^P",7,"^Q",681,"^R",13,"^S",["^T",["^U",["^T",[["~$vals"],["^=","^44"]]]]],"^W","Return a VALUES statement or clause.\n\n  Examples:\n\n\n    (values db [[1 \"one\"] [2 \"two\"] [3 \"three\"]])\n\nWith insert:\n\n    (insert db :distributors []\n      (values [{:did 106 :dname \"XYZ Widgets\"}]))","^16",["^ ","^Y",false,"^11",2,"^Z",["^T",[["^44"],["^=","^44"]]],"^S",["^T",[["^44"],["^=","^44"]]],"^10",["^T",[null,null]]]],"^9","~$sqlingvo.core/values","^Y",false,"^N","sqlingvo/core.cljc","^R",13,"^16",["^ ","^Y",false,"^11",2,"^Z",["^T",[["^44"],["^=","^44"]]],"^S",["^T",[["^44"],["^=","^44"]]],"^10",["^T",[null,null]]],"^Z",["^T",[["^44"],["^=","^44"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",681,"^Q",681,"^11",2,"^12",true,"^S",["^T",[["^44"],["^=","^44"]]],"^W","Return a VALUES statement or clause.\n\n  Examples:\n\n\n    (values db [[1 \"one\"] [2 \"two\"] [3 \"three\"]])\n\nWith insert:\n\n    (insert db :distributors []\n      (values [{:did 106 :dname \"XYZ Widgets\"}]))"],"~$with",["^ ","^L",null,"^M",["^ ","^N","^:","^O",745,"^P",7,"^Q",745,"^R",11,"^S",["^T",["^U",["^T",[["^=","~$bindings","~$query"]]]]],"^W","Build a WITH (common table expressions) query.","^19",2],"^9","~$sqlingvo.core/with","^Y",false,"^N","sqlingvo/core.cljc","^R",11,"^Z",["^T",[["^=","^47","^48"]]],"^[",null,"^10",["^T",[null,null]],"^P",1,"^O",745,"^19",2,"^Q",745,"^11",3,"^12",true,"^S",["^T",["^U",["^T",[["^=","^47","^48"]]]]],"^W","Build a WITH (common table expressions) query."],"^1F",["^ ","^L",null,"^M",["^ ","^N","^:","^O",282,"^P",7,"^Q",282,"^R",11,"^S",["^T",["^U",["^T",[["~$&","^1F"]]]]],"^W","Add a FROM clause to an SQL statement. The `from` forms can be one\n  or more tables, :stdin, a filename or an other sub query.\n\n  Examples:\n\nSimple select:\n\n      (select db [:*]\n        (from :continents))\n\n\nUsing `where`:\n\n      (select db [:*]\n        (from :continents :countries)\n        (where '(= :continents.id :continent-id)))\n\n\nUsing `as`:\n\n      (select db [:*]\n        (from (as (select [1 2 3]) :x)))\n\nUsing `copy`:\n\n      (copy db :country []\n        (from :stdin))\n\nUsing `copy`:\n\n      (copy db :country []\n        (from \"/usr1/proj/bray/sql/country_data\"))","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1F"]]],"^S",["^T",[["~$&","^1F"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/from","^Y",true,"^N","sqlingvo/core.cljc","^R",11,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1F"]]],"^S",["^T",[["~$&","^1F"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1F"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",282,"^Q",282,"^11",0,"^12",true,"^S",["^T",[["~$&","^1F"]]],"^W","Add a FROM clause to an SQL statement. The `from` forms can be one\n  or more tables, :stdin, a filename or an other sub query.\n\n  Examples:\n\nSimple select:\n\n      (select db [:*]\n        (from :continents))\n\n\nUsing `where`:\n\n      (select db [:*]\n        (from :continents :countries)\n        (where '(= :continents.id :continent-id)))\n\n\nUsing `as`:\n\n      (select db [:*]\n        (from (as (select [1 2 3]) :x)))\n\nUsing `copy`:\n\n      (copy db :country []\n        (from :stdin))\n\nUsing `copy`:\n\n      (copy db :country []\n        (from \"/usr1/proj/bray/sql/country_data\"))"],"~$order-by",["^ ","^L",null,"^M",["^ ","^N","^:","^O",491,"^P",7,"^Q",491,"^R",15,"^S",["^T",["^U",["^T",[["~$&","^1M"]]]]],"^W","Add a ORDER BY clause to an SQL statement.","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/order-by","^Y",true,"^N","sqlingvo/core.cljc","^R",15,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1M"]]],"^S",["^T",[["~$&","^1M"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1M"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",491,"^Q",491,"^11",0,"^12",true,"^S",["^T",[["~$&","^1M"]]],"^W","Add a ORDER BY clause to an SQL statement."],"~$intersect",["^ ","^L",null,"^M",["^ ","^N","^:","^O",375,"^P",7,"^Q",375,"^R",16,"^S",["^T",["^U",["^T",[["~$&","^1>"]]]]],"^W","Build an INTERSECT statement.\n\nExamples:\n\n     (intersect\n      (select db [1])\n      (select db [2]))\n\nAnother example:\n\n     (intersect\n      {:all true}\n      (select db [1])\n      (select db [2]))","^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1>"]]],"^S",["^T",[["~$&","^1>"]]],"^10",["^T",[null]]]],"^9","~$sqlingvo.core/intersect","^Y",true,"^N","sqlingvo/core.cljc","^R",16,"^16",["^ ","^Y",true,"^11",0,"^Z",[["^T",["^1>"]]],"^S",["^T",[["~$&","^1>"]]],"^10",["^T",[null]]],"^Z",[["^T",["^1>"]]],"^[",null,"^10",["^T",[null]],"^P",1,"^O",375,"^Q",375,"^11",0,"^12",true,"^S",["^T",[["~$&","^1>"]]],"^W","Build an INTERSECT statement.\n\nExamples:\n\n     (intersect\n      (select db [1])\n      (select db [2]))\n\nAnother example:\n\n     (intersect\n      {:all true}\n      (select db [1])\n      (select db [2]))"]],"~:require-macros",null,"~:cljs.analyzer/constants",["^ ","~:seen",["^4",["^K","^X","~$&","^17","~:encoding","^3N","~$x","^13","^14","~:continue-identity","^1:","^15","~:schema","^48","~:explain","~:having","^18","~:create-table","~:children","~:definitions","^1<","^1;","^:","^1?","^1=","^1I","~:except","^1A","~:copy","^1@","~:insert","~:where","^1B","^1D","~:pk","~$cljs.core/=","~:desc","~:table","~:like","~:truncate","^1E","^31","^1K","~:limit","~:do-constraint","~:group-by","~:concurrently","^39","~:exprs","~:else","^1N","^3>","^1L","~:cascade","^1O","^1Q","~:offset","^1R","^1S","~:on-conflict-on-constraint","~:db","~:inherits","~:if-exists","^1>","^2F","~:default","~:check","~:drop-materialized-view","^1T","^1U","~:ns","~:bindings","~:columns","^9","^2?","^Y","^1X","^1V","^1[","^1Y","^22","~:asc","^20","^23","^25","^N","^26","^27","^29","^28","^41","^2;","^2:","^R","^1J","~:joins","~:refresh-materialized-view","^2<","^16","^21","^2=","^2@","^2>","^2B","^2A","^2D","^2C","~:type","^2E","^2G","~:update","~:delete","^2H","~:tables","^2J","^Z","~:do-update","^2L","~:checks","~:if-not-exists","^2K","~:op","^2M","^6","^2N","^1M","^2O","^=","^2S","^2R","^2Q","^2U","^2T","~:window","^2V","^2W","^2Y","^10","^2X","~:drop-table","^47","^24","~:distinct","^P","^2[","^2Z","^32","^30","~:delimiter","^34","^33","~:records","^3M","^37","^35","~:restart-identity","~:stmts","~:alias","^3=","^1G","^38","^3;","^3<","~:nulls","^8","^3@","~:returning","^3?","^3A","^O","^2I","~:expr","^3B","^3C","^1H","^3D","^3E","~:with","~:from","^3:","~:with-data","~:condition","~:values","^3F","^3G","^44","~:opts","^3H","^3I","^1Z","^5","^3K","^3L","^3O","~:order-by","^19","^3Q","^3P","^Q","~:stmt","^3R","^3S","^3T","^3U","~:intersect","~:on","^2P","^1C","^11","~:restrict","^3V","^3W","^36","~:target","~:do-nothing","~:on-conflict","^3Y","^3X","^3[","^3Z","^S","~:query","^E","^42","^45","^40","^V","^43","~:union","^46","^1F","^49","^4:","^W","~:using","~:outer","^1W","~:temporary","^4<","^4;","~:primary-key","~:test","~:direction","^1P","~:join","~:view","~:row","~:select","^3J","^4>","~:data","^4="]],"~:order",["^2Q","^57","^9","^N","^R","^16","^P","^O","^Q","^S","^W","^68","^:","^=","^Y","^11","^Z","^10","^2P","^1W","~$&","^2B","^2A","~$xnull]